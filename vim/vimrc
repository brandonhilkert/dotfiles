set nocompatible                " choose no compatibility with legacy vi
set encoding=utf-8
filetype off

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

Bundle 'gmarik/vundle'
Bundle 'epmatsw/ag.vim'
Bundle 'tomtom/tlib_vim'
Bundle 'plasticboy/vim-markdown'
Bundle 'scrooloose/nerdtree'
Bundle 'MarcWeber/vim-addon-mw-utils'
Bundle "garbas/vim-snipmate"
Bundle "honza/vim-snippets"
Bundle 'tomtom/tcomment_vim'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-fugitive'
Bundle 'nono/vim-handlebars'
Bundle 'tpope/vim-rails'
Bundle 'janko-m/vim-test'
Bundle 'tpope/vim-bundler'
Bundle 'vim-ruby/vim-ruby'
Bundle 'tpope/vim-rake'
Bundle 'tpope/vim-haml'
Bundle 'tpope/vim-git'
Bundle 'kchmck/vim-coffee-script'
Bundle 'kien/ctrlp.vim'
Bundle 'Lokaltog/vim-powerline'
Bundle 'chase/vim-ansible-yaml'
Bundle 'stephpy/vim-yaml'
Bundle 'rstacruz/sparkup', {'rtp': 'vim/'}
Bundle 'ap/vim-css-color'
Bundle 'junegunn/vim-easy-align'

filetype plugin indent on       " load file type plugins + indentation

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" COLOR
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set t_Co=256 " 256 colors
set guifont=Menlo:h14
":color Tomorrow-Night-Eighties
":set background=dark

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" BASIC EDITING CONFIGURATION
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
syntax enable
set cursorline

" Don't show current mode b/c we have powerline
set noshowmode

set showmatch
set showcmd                     " display incomplete commands
set ruler
set number
set relativenumber
set wildmenu
set wildmode=longest,list
set lazyredraw
set visualbell
set splitright
set splitbelow
set clipboard=unnamed
set laststatus=2

" Store temporary files in a central spot
set backup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp

" Whitespace
set nowrap                      " don't wrap lines
set tabstop=2 shiftwidth=2      " a tab is two spaces (or set this to 4)
set expandtab                   " use spaces, not tabs (optional)
set backspace=indent,eol,start  " backspace through everything in insert mode
set autoindent

" Set 7 lines to the cursor - when moving vertically using j/k
set so=7

" Height of the command bar
set cmdheight=2

" Set ex history higher
set history=1000

" Preseve undo across sessions
if exists("&undodir")
  set undodir=~/.vim-tmp/undo//
  set undofile
endif

" Resize splits when the window is resized
au VimResized * :wincmd =

" Remove trailing whitepsace from Ruby files on save
autocmd BufWritePre * :%s/\s\+$//e

" Return to last edit position when opening files (You want this!)
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif

" Open nerdtree if no args
autocmd VimEnter * if !argc() | NERDTree | endif

" Don't return to the last line of a Git commit message
au FileType gitcommit au! BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])

" Automatically reload vimrc when it's saved
autocmd! BufWritePost vimrc so ~/.vimrc

" Searching
set hlsearch                    " highlight matches
set incsearch                   " incremental searching
set ignorecase                  " searches are case insensitive...
set smartcase                   " ... unless they contain at least one capital letter

let mapleader=","

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Mouse
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Send more characters for redraws
set ttyfast

" Enable mouse use in all modes
set mouse=a

" Set this to the name of your terminal that supports mouse codes.
" Must be one of: xterm, xterm2, netterm, dec, jsbterm, pterm
set ttymouse=xterm2

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Markdown
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:vim_markdown_folding_disabled=1
augroup markdown
    au!
    autocmd Syntax markdown setlocal textwidth=79
    if exists("&colorcolumn")
        autocmd Syntax markdown setlocal colorcolumn=80
    endif
augroup END

" Spellcheck markdown files
autocmd Filetype markdown setlocal spell
autocmd Filetype text setlocal spell

" Highlight words to avoid in tech writing
" =======================================
"
"   obviously, basically, simply, of course, clearly,
"   just, everyone knows, However, So, easy

"   http://css-tricks.com/words-avoid-educational-writing/

highlight TechWordsToAvoid ctermbg=red ctermfg=white
function MatchTechWordsToAvoid()
        match TechWordsToAvoid /\c\<\(that\|obviously\|basically\|simply\|of\scourse\|clearly\|just\|everyone\sknows\|however\|so,\|easy\)\>/
endfunction
autocmd FileType markdown call MatchTechWordsToAvoid()
autocmd BufWinEnter *.md call MatchTechWordsToAvoid()
autocmd InsertEnter *.md call MatchTechWordsToAvoid()
autocmd InsertLeave *.md call MatchTechWordsToAvoid()
autocmd BufWinLeave *.md call clearmatches()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" NERDTree
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! ShowFileInNERDTree()
  if exists("t:NERDTreeBufName")
    NERDTreeFind
  else
    NERDTree
    wincmd l
    NERDTreeFind
  endif
endfunction
map <leader>N :call ShowFileInNERDTree()<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Ctrl-P
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:ctrlp_max_height = 20
let g:ctrlp_working_path_mode = 0

if executable('ag')
  " Use ag over grep
  " set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif


" ignore Rubinius, Sass cache files
set wildignore+=tmp/**,*.scssc,*.sassc

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Test
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nmap <silent> <Leader>r :TestFile<CR>
nmap <silent> <Leader>e :TestNearest<CR>
nmap <silent> <Leader>a :TestSuite<CR>
nmap <silent> <leader>l :TestLast<CR>
nmap <silent> <leader>g :TestVisit<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RENAME CURRENT FILE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! RenameFile()
    let old_name = expand('%')
    let new_name = input('New file name: ', expand('%'), 'file')
    if new_name != '' && new_name != old_name
        exec ':saveas ' . new_name
        exec ':silent !rm ' . old_name
        redraw!
    endif
endfunction
map <leader>m :call RenameFile()<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ARROW KEYS ARE UNACCEPTABLE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <Left> <Nop>
map <Right> <Nop>
map <Up> <Nop>
map <Down> <Nop>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MISC KEY MAPS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Move around splits with <c-hjkl>
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l
nnoremap <leader><leader> <c-^>
map <Leader>f :Ag<space>
map <Leader>F :AgFromSearch<CR>

imap ii <esc>
nnoremap <cr> :nohlsearch<cr>
map <Leader>n :NERDTreeToggle<CR>

" Open the associated file in a horizontal split (ruby)
map <leader>s :AS<cr>

" Open the associated file in a vertical split (ruby)
map <leader>v :AV<cr>

"save & quit & reload faster
nnoremap <leader>q :q<CR>
nnoremap <leader>w :w<CR>
nnoremap <leader>x :x<CR>

" Reformat paragraphs and list.
nnoremap R gq}

xmap ga <Plug>(EasyAlign)

nnoremap <leader>ev :vsp $MYVIMRC<CR>
nnoremap <leader>sv :source $MYVIMRC<CR>

let g:go_fmt_command = "goimports"

au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
au FileType go nmap <Leader>gb <Plug>(go-doc-browser)
au FileType go nmap <leader>r <Plug>(go-run)
au FileType go nmap <leader>b <Plug>(go-build)
au FileType go nmap <leader>t <Plug>(go-test)
au FileType go nmap <leader>c <Plug>(go-coverage)
au FileType go nmap <Leader>ds <Plug>(go-def-split)
au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
au BufNewFile,BufRead *.go setlocal noet ts=8 sw=8 sts=8

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Color stuff b/c it doesn't work after setting the colorscheme
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
highlight LineNR ctermfg=238
highlight Visual term=none cterm=none ctermbg=240
highlight Comment ctermfg=238
highlight Search ctermfg=234 ctermbg=222
highlight CursorLine term=none cterm=none ctermbg=236
highlight SpellBad term=underline cterm=underline ctermfg=Red ctermbg=none

